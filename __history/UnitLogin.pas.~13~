unit UnitLogin;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.Imaging.pngimage, Vcl.Buttons;

type
  TformLogin = class(TForm)
    panelCabLogin: TPanel;
    imageLogin: TImage;
    panelUsuario: TPanel;
    editLoginUsuario: TEdit;
    labUsuLogin: TLabel;
    panelEditUsuario: TPanel;
    editLoginSenha: TEdit;
    labSenhaLogin: TLabel;
    panelEditSenha: TPanel;
    paneLiberar: TPanel;
    butLoginLiberar: TSpeedButton;
    panelFechar: TPanel;
    butLoginFechar: TSpeedButton;
    procedure editLoginUsuarioKeyPress(Sender: TObject; var Key: Char);
    procedure butLoginLiberarClick(Sender: TObject);
    procedure butLoginFecharClick(Sender: TObject);
    procedure editLoginSenhaKeyPress(Sender: TObject; var Key: Char);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  formLogin: TformLogin;

implementation

{$R *.dfm}

uses unitArtCancelados, UnitConfirmacaoAvancoProducao, UnitDatamodule,
  UnitDMHistoricOrdem, UnitHistoricOrdem, UnitOrdemCorteCores,
  UnitPrevisto, UnitPrincipal, UnitProdutoAcabado, UnitVerificaVersao, System.Hash;




procedure TformLogin.butLoginLiberarClick(Sender: TObject);
var
    password : String;
begin
    if TRIM(editLoginUsuario.Text) =''  then
    begin
        editLoginUsuario.SetFocus;
        Application.MessageBox('Digite o nome do usuário', 'Atenção', MB_OK + MB_ICONINFORMATION);
        abort;
    end;

    if TRIM(editLoginSenha.Text) ='' then
    begin
        editLoginSenha.SetFocus;
        Application.MessageBox('Digite a senha do usuário', 'Atenção', MB_OK + MB_ICONINFORMATION);
        abort;
    end;

    with dmOrdemCorte.qyUsuario do
    begin
        Close;
        SQL.Clear;
        SQL.Add('SELECT * FROM usuario WHERE us_login = :login AND us_senha = :senha');
        ParamByName('login').AsString :=editLoginUsuario.Text;
        ParamByName('senha').AsString := THashMD5.GetHashString(editLoginSenha.Text);
        Open;
    end;

    if dmOrdemCorte.qyUsuario.IsEmpty then
    begin
        Application.MessageBox('Usuário ou senha inválida','Atenção', MB_OK + MB_ICONINFORMATION);
        abort;
    end;

    if dmOrdemCorte.qyUsuario.FieldByName('us_idsetor').Value<>'1' then
    begin
        Application.MessageBox('Você não tem permissão para liberar!', 'Atenção', MB_OK + MB_ICONINFORMATION);
        abort
    end;

    ShowMessage('Botao Liberado Clicado!');
    formPrevisto.retirArtigo;
    formLogin.Close;
end;

procedure TformLogin.editLoginSenhaKeyPress(Sender: TObject;
  var Key: Char);
begin
    if Key =#13 then
    begin
        butLoginLiberarClick(Sender);
    end;
end;

procedure TformLogin.editLoginUsuarioKeyPress(Sender: TObject;
  var Key: Char);
begin
    if Key =#13 then
    begin
        editLoginSenha.SetFocus;
    end;

end;

procedure TformLogin.FormClose(Sender: TObject; var Action: TCloseAction);
begin
    Action :=CaFree;
end;

procedure TformLogin.butLoginFecharClick(Sender: TObject);
begin
    Application.MessageBox('Cancelado pelo usuário!', 'Ordem de Corte',MB_OK + MB_ICONINFORMATION);
    formLogin.Close;
end;

end.
